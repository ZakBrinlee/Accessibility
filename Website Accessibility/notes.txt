NOTES:

Types of Disabilities:
  - Attention-Deficit/Hyperactivity Disorders
  - Blindness or Low Vision
  - Brain Injuries
  - Deaf/Hard-of-hearing
  - Learning Disabilities
  - Physical Disabilities
  - Speech and Language Disabilities

Key takeaways:
  - All websites should be Perceivable, Operable, Understandable and Robust
  - Custom components are a big area that needs accessibility coverage. Making your own checkbox or button can negate the built it accessibile functionality that comes with HTML elements

Tools:
 - Get keycode info quickly - http://keycode.info/

WebAim Checklist:
  - Awesome checklist broken up by element/content type
    - https://webaim.org/standards/wcag/checklist

SECTIONS:

  Keyboard Navigation:
    - Major sites have implemented keyboard shortcuts for quick actions (Twitter, Reddit etc - use shift+? to see)
    - Tab-able elements by default
      - <a>
      - <button>
      - <input>
      - <select>
      - <textarea>
      - <iframe>
    - Tabindex values
      - a negative value means the element is focusable but not reachable via keyboard Navigation
      - 0 (zero) means the element should be focusable and reachable with keyboard navigation.
      - a positive value means focusable and reachable with keyboard navigation. Relative order is defined by the value of the attribute. If elements share a same tabindex then it will go in order by position in the document
    - Skip Links
      - WebAim technique page: https://webaim.org/techniques/skipnav/
      - Checkout nytimes.com - They have an awesome 'Skip to navigation' and 'Skip to Site Index' links once you start tabbing on the page
      - Great way to allow users to skip to important parts of the content.

  Focus Control:
    - Easy way to identify which element is selected `var currentElement = document.activeElement`
    - Great way to use `document.activeElement` is with modals or something that temparily navigates the user away. Using the currentElement can bring the focus back to the element that led to the temp navigation.
    - Tabtrapping - trap/restrict the user focus/keyboard movement inside the modal/popup
      - Select your modal
      - Find and select all focusable childdren
      - Convert them to an array
      - Find the first and last tabbable item inside modal
      - Listen for keydown event
      - Check to see if its the tab key or shift+tab
      - If moving forward and on the last item => focus the first item
      - If moving backward and on the first item => focus the last item
    - Look at `focusable` module. Which simply returns a string of all focusable elements to use with selecto
      - a[href], area[href], input:not([disabled]):not([type="hidden"]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable], audio[controls], video[controls], summary, [tabindex^="0"], [tabindex^="1"], [tabindex^="2"], [tabindex^="3"], [tabindex^="4"], [tabindex^="5"], [tabindex^="6"], [tabindex^="7"], [tabindex^="8"], [tabindex^="9"]

